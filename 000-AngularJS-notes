# AngularJS 是一个 JavaScript 框架。它可通过 <script> 标签添加到 HTML 页面。
- AngularJS 是一个 JavaScript 框架。它是一个以 JavaScript 编写的库。
- AngularJS 是以一个 JavaScript 文件形式发布的，可通过 script 标签添加到网页中：
- <script src="http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js"></script>

# AngularJS 扩展了 HTML
- AngularJS 通过指令扩展了HTML，且通过表达式绑定数据到HTML。
- AngularJS 通过 ng-directives 扩展了 HTML。
- ng-app 指令定义一个 AngularJS 应用程序。
- ng-model 指令把元素值（比如输入域的值）绑定到应用程序。
- ng-bind 指令把应用程序数据绑定到 HTML 视图。

#实例讲解：
- 当网页加载完毕，AngularJS 自动开启。
- ng-app 指令告诉 AngularJS，<div> 元素是 AngularJS 应用程序 的"所有者"。
- ng-model 指令把输入域的值绑定到应用程序变量 name。
- ng-bind 指令把应用程序变量 name 绑定到某个段落的 innerHTML。

#表达式
- AngularJS 表达式写在双大括号内：{{ expression }}。
- AngularJS 表达式把数据绑定到 HTML，这与 ng-bind 指令有异曲同工之妙。
- AngularJS 将在表达式书写的位置"输出"数据。
- AngularJS 表达式 很像 JavaScript 表达式：它们可以包含文字、运算符和变量。
- 实例 {{ 5 + 5 }} 或 {{ firstName + " " + lastName }}

#AngularJS 应用
- AngularJS 模块（Module） 定义了 AngularJS 应用。
- AngularJS 控制器（Controller） 用于控制 AngularJS 应用。
- ng-app指令定义了应用, ng-controller 定义了控制器。
- 使用 ng-init 不是很常见。您将在控制器一章中学习到一个更好的初始化数据的方式。
- AngularJS 对象就像 JavaScript 对象：

AngularJS 表达式 vs. JavaScript 表达式

- 类似于 JavaScript 表达式，AngularJS 表达式可以包含字母，操作符，变量。
- 与 JavaScript 表达式不同，AngularJS 表达式可以写在 HTML 中。
- 与 JavaScript 表达式不同，AngularJS 表达式不支持条件判断，循环及异常。
- 与 JavaScript 表达式不同，AngularJS 表达式支持过滤器。

# 指令
- AngularJS 通过内置的指令来为应用添加功能。
- AngularJS 指令是扩展的 HTML 属性，带有前缀 ng-。
- ng-app 指令初始化一个 AngularJS 应用程序。
- ng-init 指令初始化应用程序数据。
- ng-model 指令把元素值（比如输入域的值）绑定到应用程序。
- AngularJS 允许你自定义指令。

#ng-app 指令
- ng-app 指令定义了 AngularJS 应用程序的 根元素。
- ng-app 指令在网页加载完毕时会自动引导（自动初始化）应用程序。
- 稍后您将学习到 ng-app 如何通过一个值（比如 ng-app="myModule"）连接到代码模块。

#ng-init 指令
- ng-init 指令为 AngularJS 应用程序定义了 初始值。
- 通常情况下，不使用 ng-init。您将使用一个控制器或模块来代替它。

#ng-model 指令
- ng-model 指令 绑定 HTML 元素 到应用程序数据。
- ng-model 指令也可以：为应用程序数据提供类型验证（number、email、required）。
- 为应用程序数据提供状态（invalid、dirty、touched、error）。
Valid: true (如果输入的值是合法的则为 true)。
Dirty: false (如果值改变则为 true)。
Touched: false (如果通过触屏点击则为 true)。
- 为 HTML 元素提供 CSS 类。
- 绑定 HTML 元素到 HTML 表单。
- ng-model 指令用于绑定应用程序数据到 HTML 控制器(input, select, textarea)的值。
- ng-model 指令基于它们的状态为 HTML 元素提供了 CSS 类：
- ng-model 指令根据表单域的状态添加/移除以下类：
    ng-empty
    ng-not-empty
    ng-touched
    ng-untouched
    ng-valid
    ng-invalid
    ng-dirty
    ng-pending
    ng-pristine


#ng-repeat 指令
- ng-repeat 指令对于集合中（数组中）的每个项会 克隆一次 HTML 元素。

#创建自定义的指令
- 除了 AngularJS 内置的指令外，我们还可以创建自定义指令。
- 你可以使用 .directive 函数来添加自定义的指令。
- 要调用自定义指令，HTML 元素上需要添加自定义指令名。
- 使用驼峰法来命名一个指令， runoobDirective, 但在使用它时需要以 - 分割, runoob-directive:
- 可以通过以下方式来调用指令：元素名、属性、类名、注释 
- restrict 值可以是以下几种:
    E 作为元素名使用
    A 作为属性使用
    C 作为类名使用
    M 作为注释使用
restrict 默认值为 EA, 即可以通过元素名和属性名来调用指令。

#AngularJS Scope(作用域)
- Scope(作用域) 是应用在 HTML (视图) 和 JavaScript (控制器)之间的纽带。
- Scope 是一个对象，有可用的方法和属性。
- Scope 可应用在视图和控制器上。
- 当你在 AngularJS 创建控制器时，你可以将 $scope 对象当作一个参数传递:
- Scope 概述: 
AngularJS 应用组成如下：
    View(视图), 即 HTML。
    Model(模型), 当前视图中可用的数据。
    Controller(控制器), 即 JavaScript 函数，可以添加或修改属性。
scope 是模型。
- scope 是一个 JavaScript 对象，带有属性和方法，这些属性和方法可以在视图和控制器中使用。

#Scope 作用范围
- 了解你当前使用的 scope 是非常重要的。
- 在以上两个实例中，只有一个作用域 scope，所以处理起来比较简单，但在大型项目中， HTML DOM 中有多个作用域，这时你就需要知道你使用的 scope 对应的作用域是哪一个。
- 根作用域：所有的应用都有一个 $rootScope，它可以作用在 ng-app 指令包含的所有 HTML 元素中。
- $rootScope 可作用于整个应用中。是各个 controller 中 scope 的桥梁。用 rootscope 定义的值，可以在各个 controller 中使用。

#AngularJS 控制器
- AngularJS 控制器 控制 AngularJS 应用程序的数据。
- AngularJS 控制器是常规的 JavaScript 对象。
- AngularJS 应用程序被控制器控制。
- ng-controller 指令定义了应用程序控制器。
- 控制器是 JavaScript 对象，由标准的 JavaScript 对象的构造函数 创建。

#AngularJS 过滤器
- 过滤器可以使用一个管道字符（|）添加到表达式和指令中。
- AngularJS 过滤器可用于转换数据：
currency 	格式化数字为货币格式。
filter 		从数组项中选择一个子集。
lowercase 	格式化字符串为小写。
orderBy 	根据某个表达式排列数组。
uppercase 	格式化字符串为大写。

#AngularJS 服务(Service)
- AngularJS 中你可以创建自己的服务，或使用内建服务。
- 在 AngularJS 中，服务是一个函数或对象，可在你的 AngularJS 应用中使用。
- AngularJS 内建了30 多个服务。
- 有个 $location 服务，它可以返回当前页面的 URL 地址。AngularJS 会一直监控应用，处理事件变化， AngularJS 使用 $location 服务比使用 window.location 对象更好。
- $http 是 AngularJS 应用中最常用的服务。服务向服务器发送请求，应用响应服务器传送过来的数据。
- AngularJS $timeout 服务对应了 JS window.setTimeout 函数。
- 创建自定义服务, 你可以创建访问自定义服务，链接到你的模块中：
- 当你创建了自定义服务，并连接到你的应用上后，你可以在控制器，指令，过滤器或其他服务中使用它。

#AngularJS $http
- $http 是 AngularJS 中的一个核心服务，用于读取远程服务器的数据。
- $http.get(url) 是用于读取服务器数据的函数。 

#AngularJS 表单
- AngularJS 表单是输入控件的集合。
- HTML 控件，以下 HTML input 元素被称为 HTML 控件:
    input 元素
    select 元素
    button 元素
    textarea 元素
- HTML 表单，HTML 表单通常与 HTML 控件同时存在。

# AngularJS Select(选择框)
- AngularJS 可以使用数组或对象创建一个下拉列表选项。
- 在 AngularJS 中我们可以使用 ng-option 指令来创建一个下拉列表，列表项通过对象和数组循环输出，

#AngularJS 表格
- ng-repeat 指令可以完美的显示表格。 

# AngularJS DOM
- AngularJS 为 HTML DOM 元素的属性提供了绑定应用数据的指令。
- ng-disabled 指令直接绑定应用程序数据到 HTML 的 disabled 属性。
- ng-show 指令隐藏或显示一个 HTML 元素。
- ng-hide 指令用于隐藏或显示 HTML 元素。

# AngularJS 事件
- AngularJS 有自己的 HTML 事件指令。
- ng-click 指令定义了 AngularJS 点击事件。 

#AngularJS 模块
- 模块定义了一个应用程序。
- 模块是应用程序中不同部分的容器。
- 模块是应用控制器的容器。
- 控制器通常属于一个模块。
- var app = angular.module("myApp", []); 
- 在模块定义中 [] 参数用于定义模块的依赖关系。
- 中括号[]表示该模块没有依赖，如果有依赖的话会在中括号写上依赖的模块名字。
- 可以在 AngularJS 应用中添加控制器，指令，过滤器等。
- JavaScript 中应避免使用全局函数。因为他们很容易被其他脚本文件覆盖。AngularJS 模块让所有函数的作用域在该模块下，避免了该问题。
- 对于 HTML 应用程序，通常建议把所有的脚本都放置在 <body> 元素的最底部。这会提高网页加载速度，因为 HTML 加载不受制于脚本加载。
- 在我们的多个 AngularJS 实例中，您将看到 AngularJS 库是在文档的 <head> 区域被加载。在我们的实例中，AngularJS 在 <head> 元素中被加载，因为对 angular.module 的调用只能在库加载完成后才能进行。
- 另一个解决方案是在 <body> 元素中加载 AngularJS 库，但是必须放置在您的 AngularJS 脚本前面：

# AngularJS 全局 API
- AngularJS 全局 API 用于执行常见任务的 JavaScript 函数集合，如：
    比较对象
    迭代对象
    转换对象
- 全局 API 函数使用 angular 对象进行访问。
以下列出了一些通用的 API 函数：
API 					描述
angular.lowercase() 	转换字符串为小写
angular.uppercase() 	转换字符串为大写
angular.isString() 		判断给定的对象是否为字符串，如果是返回 true。
angular.isNumber() 		判断给定的对象是否为数字，如果是返回 true。

# AngularJS 包含
- 在 HTML 中，目前还不支持包含 HTML 文件的功能。
- 在 AngularJS 中，你可以在 HTML 中包含 HTML 文件。
- 服务端包含: 大多服务端脚本都支持包含文件功能 (SSI： Server Side Includes); 使用 SSI, 你可在 HTML 中包含 HTML 文件，并发送到客户端浏览器。
- 客户端包含: 通过 JavaScript 有很多种方式可以在 HTML 中包含 HTML 文件。通常我们使用 http 请求 (AJAX) 从服务端获取数据，返回的数据我们可以通过 使用 innerHTML 写入到 HTML 元素中。 
- 使用 AngularJS, 你可以使用 ng-include 指令来包含 HTML 内容

#AngularJS 动画
- AngularJS 提供了动画效果，可以配合 CSS 使用。
- AngularJS 使用动画需要引入 angular-animate.min.js 库。
<script src="http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular-animate.min.js"></script>
- 还需在应用中使用模型 ngAnimate：<body ng-app="ngAnimate">
- ngAnimate 做了什么? ngAnimate 模型可以添加或移除 class 。
- ngAnimate 模型并不能使 HTML 元素产生动画，但是 ngAnimate 会监测事件，类似隐藏显示 HTML 元素 ，如果事件发生 ngAnimate 就会使用预定义的 class 来设置 HTML 元素的动画。
- AngularJS 添加/移除 class 的指令:
    ng-show
    ng-hide
    ng-class
    ng-view
    ng-include
    ng-repeat
    ng-if
    ng-switch
- ng-show 和 ng-hide 指令用于添加或移除 ng-hide class 的值。
- 其他指令会在进入 DOM 会添加 ng-enter 类，移除 DOM 会添加 ng-leave 属性。
- 当 HTML 元素位置改变时，ng-repeat 指令同样可以添加 ng-move 类 。
- 此外， 在动画完成后，HTML 元素的类集合将被移除。例如： ng-hide 指令会添加一下类：
    ng-animate
    ng-hide-animate
    ng-hide-add (如果元素将被隐藏)
    ng-hide-remove (如果元素将显示)
    ng-hide-add-active (如果元素将隐藏)
    ng-hide-remove-active (如果元素将显示)

# AngularJS 依赖注入
- 什么是依赖注入? wiki 上的解释是：依赖注入（Dependency Injection，简称DI）是一种软件设计模式，在这种模式下，一个或更多的依赖（或服务）被注入（或者通过引用传递）到一个独立的对象（或客户端）中，然后成为了该客户端状态的一部分。
- 该模式分离了客户端依赖本身行为的创建，这使得程序设计变得松耦合，并遵循了依赖反转和单一职责原则。与服务定位器模式形成直接对比的是，它允许客户端了解客户端如何使用该系统找到依赖
    一句话 --- 没事你不要来找我，有事我会去找你。
- AngularJS 提供很好的依赖注入机制。以下5个核心组件用来作为依赖注入：
- value: Value 是一个简单的 javascript 对象，用于向控制器传递值（配置阶段）：
- factory: factory 是一个函数用于返回值。在 service 和 controller 需要时创建。
- provider: AngularJS 中通过 provider 创建一个 service、factory等(配置阶段)。Provider 中提供了一个 factory 方法 get()，它用于返回 value/service/factory。
- constant: constant(常量)用来在配置阶段传递数值，注意这个常量在配置阶段是不可用的。

#AngularJS 路由

- AngularJS 路由允许我们通过不同的 URL 访问不同的内容。
- 通过 AngularJS 可以实现多视图的单页Web应用（single page web application，SPA）。
- 通常我们的URL形式为 http://runoob.com/first/page，但在单页Web应用中 AngularJS 通过 # + 标记 实现，例如：
http://runoob.com/#/first
http://runoob.com/#/second
http://runoob.com/#/third
- 当我们点击以上的任意一个链接时，向服务端请的地址都是一样的 (http://runoob.com/)。 因为 # 号之后的内容在向服务端请求时会被浏览器忽略掉。 所以我们就需要在客户端实现 # 号后面内容的功能实现。 AngularJS 路由 就通过 # + 标记 帮助我们区分不同的逻辑页面并将不同的页面绑定到对应的控制器上。

#AngularJS 应用架构
- 以上实例是一个完整的 AngularJS 单页Web应用（single page web application，SPA）。
- <html> 元素包含了 AngularJS 应用 (ng-app=)。
- <div> 元素定义了 AngularJS 控制器的作用域 (ng-controller=)。
- 在一个应用可以由很多控制器。
- 应用文件(my...App.js) 定义了应用模型代码。
- 一个或多个控制器文件 (my...Ctrl.js) 定义了控制器代码。

# 应用工作原理
- ng-app 指令位于应用的根元素下。
- 对于单页Web应用（single page web application，SPA），应用的根通常为 <html> 元素。
- 一个或多个 ng-controller 指令定义了应用的控制器。每个控制器有他自己的作用域：: 定义的 HTML 元素。
- AngularJS 在 HTML DOMContentLoaded 事件中自动开始。如果找到 ng-app 指令 ， AngularJS 载入指令中的模块，并将 ng-app 作为应用的根进行编译。
- 应用的根可以是整个页面，或者页面的一小部分，如果是一小部分会更快编译和执行。
